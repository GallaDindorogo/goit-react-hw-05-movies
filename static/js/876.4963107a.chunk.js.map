{"version":3,"file":"static/js/876.4963107a.chunk.js","mappings":"8LAmCA,UA9BmB,WACjB,OAA8BA,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,SAERE,EAAAA,EAAAA,YAAU,YACRC,EAAAA,EAAAA,IAAoBH,GAASI,MAAK,SAAAC,GAAG,OAAIN,EAAWM,EAAf,GACtC,GAAE,CAACL,IAEJ,IAAMM,EAAWR,EAAQS,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,OAAQC,EAAf,EAAeA,QAASC,EAAxB,EAAwBA,WAAxB,OAC3B,2BACE,uBAAIA,KACJ,uBAAIF,KACJ,uBAAIC,MAHGF,EADkB,IAO7B,OACE,+BACE,yBACE,wBACuB,IAApBF,EAASM,QACR,wEAEAN,OAMX,C,+LC3BDO,EAAAA,EAAAA,SAAAA,QAAyB,+BAEzBA,EAAAA,EAAAA,SAAAA,OAAwB,CACtBC,QALiB,oCAQnB,IAAMC,EAAiB,mCAAG,oGACDF,EAAAA,EAAAA,IAAU,wBADT,cAClBG,EADkB,yBAEjBA,EAASC,MAFQ,2CAAH,qDAKjBC,EAAY,mCAAG,WAAMV,GAAN,uFACIK,EAAAA,EAAAA,IAAA,iBAAoBL,IADxB,cACbQ,EADa,yBAGZA,EAASC,MAHG,2CAAH,sDAMZE,EAAsB,mCAAG,WAAMC,GAAN,uFACNP,EAAAA,EAAAA,IAAU,gBAAiB,CAChDQ,OAAQ,CACND,MAAOA,KAHkB,cACvBJ,EADuB,OAM7BM,QAAQC,IAAIP,EAASC,KAAKO,SANG,kBAOtBR,EAASC,KAAKO,SAPQ,2CAAH,sDAUtBC,EAAmB,mCAAG,WAAMjB,GAAN,uFACHK,EAAAA,EAAAA,IAAA,iBAAoBL,EAApB,aADG,cACpBQ,EADoB,yBAGnBA,EAASC,KAAKS,MAHK,2CAAH,sDAMnBvB,EAAmB,mCAAG,WAAMK,GAAN,uFACHK,EAAAA,EAAAA,IAAA,iBAAoBL,EAApB,aADG,cACpBQ,EADoB,yBAEnBA,EAASC,KAAKO,SAFK,2CAAH,qD","sources":["Pages/RewiewPage/RewiewPage.jsx","Utils/MoviesAPI.jsx"],"sourcesContent":["import { getMovieReviewsByID } from 'Utils/MoviesAPI';\nimport { useEffect } from 'react';\nimport { useState } from 'react';\nimport { useParams } from 'react-router-dom';\n\nconst RewiewPage = () => {\n  const [reviews, setReviews] = useState([]);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    getMovieReviewsByID(movieId).then(rev => setReviews(rev));\n  }, [movieId]);\n\n  const elements = reviews.map(({ id, author, content, updated_at }) => (\n    <li key={id}>\n      <p>{updated_at}</p>\n      <p>{author}</p>\n      <p>{content}</p>\n    </li>\n  ));\n  return (\n    <>\n      <ul>\n        <li>\n          {elements.length === 0 ? (\n            <p>'We did not find any rewiews for this movie'</p>\n          ) : (\n            elements\n          )}\n        </li>\n      </ul>\n    </>\n  );\n};\n\nexport default RewiewPage;\n","// https://api.themoviedb.org/3/movie/550?api_key=f8293dad30f8a0ae553bd7bee540fd13\n\nimport axios from 'axios';\n\nconst AUTH_TOKEN = 'f8293dad30f8a0ae553bd7bee540fd13';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\naxios.defaults.params = {\n  api_key: AUTH_TOKEN,\n};\n\nconst getTrendingMovies = async () => {\n  const response = await axios.get('/trending/movie/week');\n  return response.data;\n};\n\nconst getMovieByID = async id => {\n  const response = await axios.get(`/movie/${id}`);\n\n  return response.data;\n};\n\nconst getMoviesByQuerySearch = async query => {\n  const response = await axios.get('/search/movie', {\n    params: {\n      query: query,\n    },\n  });\n  console.log(response.data.results);\n  return response.data.results;\n};\n\nconst getMovieCreditsByID = async id => {\n  const response = await axios.get(`/movie/${id}/credits`);\n\n  return response.data.cast;\n};\n\nconst getMovieReviewsByID = async id => {\n  const response = await axios.get(`/movie/${id}/reviews`);\n  return response.data.results;\n};\n\nexport {\n  getTrendingMovies,\n  getMovieByID,\n  getMoviesByQuerySearch,\n  getMovieCreditsByID,\n  getMovieReviewsByID,\n};\n"],"names":["useState","reviews","setReviews","movieId","useParams","useEffect","getMovieReviewsByID","then","rev","elements","map","id","author","content","updated_at","length","axios","api_key","getTrendingMovies","response","data","getMovieByID","getMoviesByQuerySearch","query","params","console","log","results","getMovieCreditsByID","cast"],"sourceRoot":""}